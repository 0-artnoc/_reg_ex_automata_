#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import argparse
import json
import os.path as path


def read_tests(f):
    basename, _ = path.splitext(path.basename(f))
    tests = []
    for lineno, line in enumerate(open(f), 1):
        fields = list(filter(None, map(str.strip, line.split('\t'))))
        if not (4 <= len(fields) <= 5) \
           or 'E' not in fields[0] or fields[0][0] == '#':
            continue

        terse_opts, pat, text, sgroups = fields[0:4]
        groups = []  # groups as integer ranges
        if sgroups == 'NOMATCH':
            groups = [None]
        elif ',' in sgroups:
            noparen = map(lambda s: s.strip('()'), sgroups.split(')('))
            for g in noparen:
                s, e = map(str.strip, g.split(','))
                if s == '?' and e == '?':
                    groups.append(None)
                else:
                    groups.append({'start': int(s), 'end': int(e)})
        else:
            # This skips tests that should result in an error.
            # There aren't many, so I think we can just capture those
            # manually. Possibly fix this in future.
            continue

        opts = []
        if pat == 'SAME':
            pat = tests[-1]['pattern']
        if '$' in terse_opts:
            pat = pat.encode('utf-8').decode('unicode_escape')
            text = text.encode('utf-8').decode('unicode_escape')
        if 'i' in terse_opts:
            opts.append('case-insensitive')

        tests.append({
            'fowler_line_number': lineno,
            'pattern': pat,
            'options': opts,
            'input': "" if text == "NULL" else text,
            'full_match': None if len(groups) == 0 else groups[0],
            'captures': groups,
        })
    return {'name': basename, 'tests': tests}


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Generate match tests from an AT&T POSIX test file.')
    aa = parser.add_argument
    aa('files', nargs='+',
       help='A list of dat AT&T POSIX test files. See src/testdata')
    args = parser.parse_args()

    groups = []
    for f in args.files:
        groups.append(read_tests(f))

    print(json.dumps({'groups': groups}, indent=2))
